// Illumina subworkflow process configuration
process {
  withName: 'CAT_ILLUMINA_FASTQ' {
    publishDir = [
      [
        path: { "${params.outdir}/fastq"},
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        mode: params.publish_dir_mode
      ]
    ]
  }

  withName: 'BLAST_MAKEBLASTDB_NCBI' {
    ext.args = '-dbtype nucl'
    publishDir = [
      [
        path: { "${params.outdir}/blast/db/ncbi"},
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        mode: params.publish_dir_mode
      ]
    ]
  }

  withName: 'BLAST_BLASTN_IRMA' {
    ext.args = '-outfmt "6 qaccver saccver pident length mismatch gapopen qstart qend sstart send evalue bitscore qlen slen qcovs stitle" -num_alignments 1000000 -evalue 1e-6'
    publishDir = [
      [
        path: { "${params.outdir}/blast/blastn/irma"},
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        mode: params.publish_dir_mode
      ]
    ]
  }

  withName: 'BLAST_BLASTN_CONSENSUS' {
    ext.args = '-outfmt "6 qaccver saccver pident length mismatch gapopen qstart qend sstart send evalue bitscore qlen slen qcovs stitle" -num_alignments 1000000 -evalue 1e-6'
    publishDir = [
      [
        path: { "${params.outdir}/blast/blastn/consensus" },
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        mode: params.publish_dir_mode
      ]
    ]
  }

  withName: 'SUBTYPING_REPORT_IRMA_CONSENSUS' {
    publishDir = [
      [
        path: { "${params.outdir}/irma"},
        pattern: "*.{xlsx,log}",
        mode: params.publish_dir_mode
      ]
    ]
  }

  withName: 'SUBTYPING_REPORT_BCF_CONSENSUS' {
    publishDir = [
      [
        path: { "${params.outdir}/"},
        pattern: "*.{xlsx,log}",
        mode: params.publish_dir_mode
      ]
    ]
  }

  withName: 'PULL_TOP_REF_ID' {
    publishDir = [
      [
        path: { "${params.outdir}/reference_sequences/${meta.id}"},
        pattern: "*.csv",
        mode: params.publish_dir_mode
      ]
    ]
  }
  
  withName: 'SEQTK_SEQ' {
    publishDir = [
      [
        path: { "${params.outdir}/reference_sequences/${sample}"},
        pattern: "*.fasta",
        mode: params.publish_dir_mode
      ]
    ]
  }

  withName: 'READ_COUNT_FAIL_TSV' {
    publishDir = [
      [
        path: { "${params.outdir}/read_count" },
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        mode: params.publish_dir_mode
      ]
    ]
  }

  withName: 'READ_COUNT_PASS_TSV' {
    publishDir = [
      [
        path: { "${params.outdir}/read_count" },
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        mode: params.publish_dir_mode
      ]
    ]
  }

  withName: 'MINIMAP2' {
    publishDir = [
      [
        path: { "${params.outdir}/mapping/${sample}"},
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        mode: params.publish_dir_mode
      ]
    ]
  }

  withName: 'MOSDEPTH_GENOME' {
    publishDir = [
      [
        path: { "${params.outdir}/mosdepth/${sample}"},
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        mode: params.publish_dir_mode
      ]
    ]
  }

  withName: 'BCFTOOLS_STATS' {
    publishDir = [
      [
        path: { "${params.outdir}/variants/${sample}" },
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        mode: params.publish_dir_mode
      ]
    ]
  }

  withName: 'CAT_CONSENSUS' {
    publishDir = [
      [
        path: { "${params.outdir}/consensus/bcftools/"},
        pattern: "*.consensus.fasta",
        mode: params.publish_dir_mode
      ]
    ]
  }

  withName: 'BCF_CONSENSUS' {
    publishDir = [
      [
        path: { "${params.outdir}/consensus/bcftools/${sample}" },
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        mode: params.publish_dir_mode
      ]
    ]
  }

  withName: 'FREEBAYES' {
    publishDir = [
      [
        path: { "${params.outdir}/variants/${sample}" },
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        mode: params.publish_dir_mode
      ]
    ]
  }

  withName: 'COVERAGE_PLOT' {
    publishDir = [
      [
        path: { "${params.outdir}/coverage_plots/${sample}" },
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        mode: params.publish_dir_mode
      ]
    ]
  }

  withName: 'VADR_CONSENSUS' {
    ext.args = '--mkey flu -r --atgonly --xnocomp --nomisc --alt_fail extrant5,extrant3'
    publishDir = [
      [
        path: { "${params.outdir}/annotation/vadr/${sample}_cat_consensus" },  // Unique path for the new process
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
      ]
    ]
  }

  withName: 'VADR_SUMMARIZE_ISSUES_CONSENSUS' {
    ext.args = ''
    publishDir = [
      [
        path: { "${params.outdir}/annotation/vadr_consensus_summary" },  // Ensure unique path
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
      ]
    ]
  }

  withName: 'POST_TABLE2ASN_CONSENSUS' {
    ext.args = ''
    publishDir = [
      [
        path: { "${params.outdir}/annotation/${sample}_cat_consensus" },  // Unique path for the post-table2asn process
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
      ]
    ]
  }

  withName: 'MULTIQC' {
    publishDir = [
      [
        path: { "${params.outdir}/MultiQC" },
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        mode: params.publish_dir_mode
      ]
    ]
  }
}
